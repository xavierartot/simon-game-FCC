'use strict';

//https://toddmotto.com/mastering-the-module-pattern/#revealing-module-pattern
var Simon = function () {
  var data = {
    caseCoche: document.querySelector('.caseCoche'),
    start: document.querySelector('.text__start'),
    startActive: document.querySelector('.text__btn'), //start btn
    green: document.querySelector('.shape__color-green'),
    red: document.querySelector('.shape__color-red'),
    blue: document.querySelector('.shape__color-blue'),
    yellow: document.querySelector('.shape__color-yellow'),
    shape: document.querySelectorAll('.shape__color'),
    countBox: document.querySelector('.text__box'), //count
    arraySimon: [3, 2, 3, 1, 4, 1, 4]
  },
      dataGame = {
    1: { color: 'green', num: 1, sound: 'http://artot.net/sounds/other1.mp3' },
    2: { color: 'red', num: 2, sound: 'http://artot.net/sounds/other2.mp3' },
    3: { color: 'blue', num: 3, sound: 'http://artot.net/sounds/play.mp3' },
    4: { color: 'yellow', num: 4, sound: 'http://artot.net/sounds/soft.mp3' }
  },
      errorSound = 'https://s3.amazonaws.com/freecodecamp/simonSound1.mp3',
      //from https://www.freecodecamp.com/challenges/build-a-simon-game
  color = '',
      random = '',
      randomTemp = '';

  // private
  var _playSound = function _playSound(sound) {
    new Audio(sound).play();
  };

  // the ai start
  var _turn = function _turn(t) {
    if (data.caseCoche.checked !== false) {
      alert('turn on the game');
      return false;
    }
    return t % 2 === 0 ? console.log(1) : console.log(0);
  };

  var error = function error(time) {
    return setTimeout(function () {
      _playSound(errorSound);
      data.countBox.textContent = 'err';
      data.countBox.classList.add('error');
      _ai();
    }, time); //1s
  };

  var opponent = function opponent() {
    data.arraySimon.push(dataGame[randomTemp]);
    for (var i = 0, l = data.arraySimon.length; i < l; i++) {
      var cur = data.arraySimon[i],
          prev = data.arraySimon[i - 1];
      //console.log(cur);
    }
  };

  var addOneStep = function addOneStep() {
    var d = data.arraySimon;

    randomTemp = Random();
    d.push(dataGame[randomTemp]);

    data.countBox.textContent = d.length;

    setTimeout(function () {

      //add color with randomTemp 
      for (var prop in data) {
        if (data.hasOwnProperty(prop)) {
          var _d = data[prop];
          if (prop === dataGame[randomTemp].color) {
            _d.classList.add('active');
          }
        }
      }
      //add sound with randomTemp 
      _playSound(dataGame[randomTemp].sound);
      console.log(dataGame[randomTemp].sound);
    }, 1000); //1s
  };

  var _ai = function _ai() {
    var d = data.arraySimon,
        j = 0,
        anim = void 0;
    if (d.length === 0) {
      //add a step
      setTimeout(function () {
        addOneStep();
      }, 1e3); //1s
    } else {
      //if the array is not empty loop through every seconds
      //then, add a step
      if (d.length > 0 && j <= d.length) {
        console.log(d);
        anim = setInterval(function () {
          if (j >= d.length) {
            clearInterval(anim);
            //add one step
            setTimeout(function () {
              //return addOneStep() 
            }, 1e3); //1s
          } else {
            removeActive();
            console.log(d[j]);
            console.log(dataGame[d[j]].color);
            console.log(dataGame[d[j]].sound);

            for (var prop in data) {
              if (data.hasOwnProperty(prop)) {
                var da = data[prop];
                if (prop === dataGame[d[j]].color) {
                  da.classList.add('active');
                }
              }
            }
            //add sound with randomTemp 
            _playSound(dataGame[d[j]].sound);
            console.log(dataGame[d[j]].sound);
            //for (let i = 0, l = d.length; i < l; i++) {
            //let current = d[i]
            //console.log(current);
            //for (let prop in dataGame){
            //if (dataGame.hasOwnProperty(prop)) {
            //if (dataGame[prop].num === current) {
            //console.log(dataGame[prop].color);
            //console.log(dataGame[prop].sound);
            //}

            //}
            //}
            //}
          }
          j++;
        }, 1e3); //1s
      }
    }
  };

  //random between 1 and 4
  var Random = function Random() {
    random = Math.floor(Math.random() * 4) + 1;
    return random;
  };

  var removeActiveClass = function removeActiveClass() {
    var col = document.querySelectorAll('.shape__color');
    for (var i = 0; i < col.length; i++) {
      col[i].classList.remove('active');
    }
  };

  // private
  // dataGame = sound, num, color
  var _start = function _start() {
    data.caseCoche.checked = false;
    //checked
    data.caseCoche.addEventListener('change', function () {
      //console.log(this.checked);
      if (this.checked) {
        //if this.checked is true
        return true;
      } else {
        //empty arraySimon 
        //data.arraySimon = []

        data.startActive.classList.remove('active');

        //remove class error
        data.countBox.classList.remove('error');
        data.countBox.textContent = '';
        //remove class active
        removeActiveClass();

        return true;
      }
    });
    data.start.addEventListener('click', function (e) {
      if (data.caseCoche.checked === true) {
        //start the ai
        _ai();
        //start btn
        data.startActive.classList.add('active');
        //remove .error
        data.countBox.classList.remove('error');
      } //end checked true
      e.preventDefault();
    }); // end click on start
    return false;
  };

  var shapeClick = function shapeClick() {
    for (var i = 0, l = data.shape.length; i < l; i++) {
      var current = data.shape[i],
          prev = data.shape[i - 1];
      current.addEventListener('click', function (e) {
        var $this = this.textContent;
        this.classList.add('active');
        _playSound(dataGame[$this].sound);
        e.preventDefault();
      });
    }
  };

  var removeActive = function removeActive() {
    for (var i = 0, l = data.shape.length; i < l; i++) {
      var current = data.shape[i],
          prev = data.shape[i - 1];
      if (current.classList.contains('active') === true) {
        current.classList.remove('active');
      }
    }
  };

  //main
  var main = function main() {

    shapeClick();
    _start();
    removeActive();
    return true;
  };

  return {
    main: main
  };
}();
Simon.main();
//Simon.anotherMethod ()
//# sourceMappingURL=data:application/json;charset=utf8;base64,
